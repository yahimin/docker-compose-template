services:
  db:
    container_name: mysql-container
    image: mysql:latest
    restart : always
    # mysql 볼륨 MountPoint
    # volumes:
    #   - ./var/lib/docker/volumes/mysql/_data 
    volumes:
      - ./mysql:/var/lib/mysql
    # env_file:
    #   - ./.env.dev
    environment:
      - MYSQL_ROOT_PASSWORD=${SQL_ROOT_PASSWORD}
      - MYSQL_USER=${SQL_USER}
      - MYSQL_PASSWORD=${SQL_PASSWORD}
      - MYSQL_DATABASE=${SQL_DATABASE}
    ports:
      - 3307:3306

    networks:
      - backend

    # wait-for.sh connection error soultion
    healthcheck:
      test: ["CMD-SHELL", "mysqladmin ping -h localhost -u${MYSQL_USER} -p${MYSQL_PASSWORD}"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s
    
  web:
    container_name: django-web
    build:
      context: ./chat
      dockerfile: Dockerfile
      # migrate : 설정된 디비 마이그레이션 파일을 기반으로 디비에 반영
      # makemigrations : 모델 변경 사항을 탐지하고 마이그레이션 파일 생성
      # --noinput : 사용자 입력을 요구하지 않도록 설정
      # --fake-initial : 기존에 캐시되어있는 마이그레이션 파일 건너뛰고 새로 수정 
    command: sh -c "python manage.py makemigrations && python manage.py migrate --fake-initial && python manage.py runserver 0.0.0.0:8000"
    # bakcend 볼륨 MountPoint
    # volumes:
    #   - /var/lib/docker/volumes/backend/_data

    # 저장할 코드베이스가 없음 (./chat 디렉터리의 파일이 변경될때마다 컨테이너 내부 .chat:/app에 바로 반영됨)
    volumes:
      - ./chat:/app

    env_file:
        - /.env
    ports:
        - 8000:8000
    restart: always
    
    depends_on:
      db:
        condition: service_healthy
        restart: true
    links:
        - db

# db 데이터 지속성을 위해서 컨테이너가 삭제되더라도 데이터베이스 데이터는 영속성 유지 
# 데이터 백업 및 복원용
volumes:
  db:

# backend 네트워크 사용해서 두 서비스가 동일한 네트워크 내에서 서로 통신하게 만듬
networks:
  backend:
    driver: bridge